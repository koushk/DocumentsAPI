// <auto-generated />
using System;
using DocumentsAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentsAPI.Migrations
{
    [DbContext(typeof(DbCtx))]
    [Migration("20230606052411_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DocumentsAPI.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Networking Services"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Dept X"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Dept Y"
                        });
                });

            modelBuilder.Entity("DocumentsAPI.Entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Divisions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "TISS"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Division X"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Division Y"
                        });
                });

            modelBuilder.Entity("DocumentsAPI.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AzureStorageReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("FolderId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OfficeId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            AzureStorageReference = "SampleReference1",
                            DepartmentId = 1,
                            DivisionId = 1,
                            FileName = "PlanningDocument",
                            FileType = "Pdf",
                            FolderId = 1,
                            IsActive = true,
                            ModifiedBy = new Guid("3f2504e0-4f89-11d3-9a0c-0305e82c3301"),
                            ModifiedOn = new DateTime(2023, 6, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            OfficeId = 1
                        },
                        new
                        {
                            Id = new Guid("9f1fef20-4e98-4c1f-8769-43b7cb2edafb"),
                            AzureStorageReference = "SampleReference2",
                            DepartmentId = 2,
                            DivisionId = 3,
                            FileName = "PlanningDocument",
                            FileType = "docx",
                            FolderId = 2,
                            IsActive = true,
                            ModifiedBy = new Guid("6b29fc40-ca47-1067-b31d-00dd010662da"),
                            ModifiedOn = new DateTime(2023, 6, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            OfficeId = 1
                        });
                });

            modelBuilder.Entity("DocumentsAPI.Entities.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Servers"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Folder X"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Folder Y"
                        });
                });

            modelBuilder.Entity("DocumentsAPI.Entities.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Server Unit"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Office X"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Office Y"
                        });
                });

            modelBuilder.Entity("DocumentsAPI.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f2504e0-4f89-11d3-9a0c-0305e82c3301"),
                            IsActive = true,
                            Name = "John"
                        },
                        new
                        {
                            Id = new Guid("6b29fc40-ca47-1067-b31d-00dd010662da"),
                            IsActive = true,
                            Name = "Adam"
                        });
                });

            modelBuilder.Entity("DocumentsAPI.Entities.Document", b =>
                {
                    b.HasOne("DocumentsAPI.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentsAPI.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentsAPI.Entities.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentsAPI.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentsAPI.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Division");

                    b.Navigation("Folder");

                    b.Navigation("Office");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
